/*
ALU (Arithmetic Logic Unit):
Computes out = one of the following functions:
               0, 1, -1,
               x, y, !x, !y, -x, -y,
               x + 1, y + 1, x - 1, y - 1,
               x + y, x - y, y - x,
               x & y, x | y
on the 16-bit inputs x, y,
according to the input bits zx, nx, zy, ny, f, no.
In addition, computes the output bits:
zr = (out == 0, 1, 0)
ng = (out < 0,  1, 0)
*/
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=xAfterZx);
    Not16(in=xAfterZx, out=notXAfterZx);
    Mux16(a=xAfterZx, b=notXAfterZx, sel=nx, out=X);

    Mux16(a=y, b=false, sel=zy, out=yAfterZy);
    Not16(in=yAfterZy, out=notYAfterZy);
    Mux16(a=yAfterZy, b=notYAfterZy, sel=ny, out=Y);

    And16(a=X, b=Y, out=XAndY);
    Add16(a=X, b=Y, out=XAddY);

    Mux16(a=XAndY, b=XAddY, sel=f, out=lastXY);
    Not16(in=lastXY, out=notLastXY);
    Mux16(a=lastXY, b=notLastXY, sel=no, out=out, out[0..7]=zr1, out[8..15]=zr2, out[15]=ng);
    
    Or8Way(in=zr1, out=outOr0);
    Or8Way(in=zr2, out=outOr1);
    Or(a=outOr0, b=outOr1, out=outOr2);
    Not(in=outOr2, out=zr);
}